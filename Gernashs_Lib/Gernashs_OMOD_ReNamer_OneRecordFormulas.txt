// -----------------------
//constants:
// -----------------------
propsCol1 = "DATA - Data\Properties\[*]\Value Type"
propsCol2 = "DATA - Data\Properties\[*]\Function Type"
propsCol3 = "DATA - Data\Properties\[*]\Property"
propsCol4 = "DATA - Data\Properties\[*]\Value 1"
propsCol5 = "DATA - Data\Properties\[*]\Value 2"
// -----------------------
//configuration:
// -----------------------
//configuration of translating the values into texts: CSV with columns: 1:Property, 2:SetFormat, 3:AddFormat, 4:Mul+AddFormat 
// (the header row is cut out)
propertyFormat = ReadFromFile("Gernashs_Lib\Gernashs_OMOD_ReNamer_PropertyFormat.csv", "Property,", true, "file not found")
//configuration of translating the max-values of ranges into texts: CSV with columns: 1:MinProperty, 2:MaxProperty, 3:SetFormat, 4:AddFormat, 5:Mul+AddFormat
// (the header row is cut out)
maxPropertyFormat = ReadFromFile("Gernashs_Lib\Gernashs_OMOD_ReNamer_MaxPropertyFormat.csv", "MinProperty,", true, "file not found")

// -----------------------
//functions:
// -----------------------

// -----------------------
//interim results / calculated helper formulas
// -----------------------
rec = SelectedRecords()
nl = LineBreak()

//this is a CSV with one row for every property and the following columns: 1:Value Type, 2:Function Type, 3:Property, 4:Value 1, 5:Value 2
propsCSV = Transpose(ReadRecords(rec, propsCol1) & nl & ReadRecords(rec, propsCol2) & nl & ReadRecords(rec, propsCol3) & nl & ReadRecords(rec, propsCol4) & nl & ReadRecords(rec, propsCol5))
//create a new CSV only containing the max-properties (and add an empty row, so that the final column count stays the same later - in case the OMOD has no max-properties)
maxPropsCSV = TextJoin(nl,true,",,,,,,,,,,,",CombineCSV(maxPropertyFormat,propsCSV,,,"inner",2,3))
//cut them out of the complete CSV
propsCSVCutMax = CombineCSV(propsCSV,maxPropertyFormat,,,"notExists",3,2)
//connect the max-values to the min-values where they exist
propsCSVWithMax = CombineCSV(propsCSVCutMax,maxPropsCSV,,,"left",3,1)
//connect the propertyFormat to the found properties (propertyFormat first -> doing it in this order ensures that the order of the output is defined by the coniguration, not the properties' order)
propsCSVWithMaxAndFormat = CombineCSV(propertyFormat,propsCSVWithMax,,,"inner",1,3)
//add a 20th column that contains the final format - this formula consumes about 90% of the total run time - keep it as less operations or nested brackets as possible, even if that means a longer formula
propsCSVFormatted = AddColToCSV(propsCSVWithMaxAndFormat,,,-1,IF(AND(col15<>"",col15&col16&col18<>col5&col6&col8),Substitute(Switch(col6,"SET",Text(Value(col8,0),col2),"ADD",Text(Value(col8,0),col3),"MUL+ADD",Text(Value(col8,0),col4)),":"," (Min\Max):")&Switch(col16,"SET",Text(Value(col18,0),col12),"ADD",Text(Value(col18,0),col13),"MUL+ADD",Text(Value(col18,0),col14)),Switch(col6,"SET",Text(Value(col8,0),col2),"ADD",Text(Value(col8,0),col3),"MUL+ADD",Text(Value(col8,0),col4)))) 
//formula would be a bit simpler, but slower:
//propsCSVFormatted = AddColToCSV(propsCSVWithMaxAndFormat,,,-1,WITH(val=Switch(col6,"SET",Text(Value(col8,0),col2),"ADD",Text(Value(col8,0),col3),"MUL+ADD",Text(Value(col8,0),col4)),if(AND(col15<>"",col15&col16&col18<>col5&col6&col8),Substitute(val,":"," (Min\Max):")&Switch(col16,"SET",Text(Value(col18,0),col12),"ADD",Text(Value(col18,0),col13),"MUL+ADD",Text(Value(col18,0),col14)),val))) 

// -----------------------
//results
// -----------------------
//read out the last column and replace the line break with the desired delimiter
formattedPropsString = Substitute(ReadFromCSV(propsCSVFormatted,,,1,20,col),nl," | ")


// -----------------------
//setOutput (and log it)
// -----------------------
//setResult = LogMsg(SetOutput(formattedPropsString, formattedPropsString), formattedPropsString)
setResult = SetOutput(formattedPropsString)
